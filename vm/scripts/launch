#!/bin/sh
set -e

rootdir=/etc/vm
name="$1"
. "$rootdir/utils.sh"

rundir="$(rundir "$name")"
consolefile="$(consolefile "$name")"

# Read files.
file="$(basename "$name.conf")"
conf="$(resolve_includes "$rootdir/conf" "$rootdir/conf/$file")"
params="$(resolve_includes "$rootdir/include" "$rootdir/machines.d/$file")"

# Set configuration
while read -r k v ; do
	eval "conf_$k='$v'"
done <<EOF
$conf
EOF

# Expand parameters.
params="$(expand "$params")"

# Build command line.
set -- qemu-system-x86_64

while read -r k v ; do
        set -- "$@" "-$k"
	if test -n "$v" ; then
		set -- "$@" "$v"
	fi
	eval "param_${k//-/_}='$v'"
done <<EOF
$params
EOF

# Setup infra.
mkdir -p "$rundir"
rm -f "$rundir"/*.sock

cleanup() {
	set +e
	"$rootdir"/scripts/ifdown "vm-$name"
	jobs -p | xargs -r kill
	rm -r "$rundir"
	trap - EXIT
	exit $1
}
trap cleanup INT TERM QUIT HUP EXIT

# Setup shares.
if [ -n "$conf_shares" ]; then
	set -- "$@" -object memory-backend-memfd,id=mem,size="$param_m",share=on -numa node,memdev=mem
	case "$param_machine" in
	microvm*) vhostdev=vhost-user-fs-device;;
	*)        vhostdev=vhost-user-fs-pci;;
	esac
	while IFS=: read -r tag source; do
		sockfile="$(virtiofsfile "$name" "$tag")"
		/usr/lib/qemu/virtiofsd \
			--socket-path="$sockfile" \
			-o source="$source" \
			-o cache=always \
			-o xattr -o posix_acl \
			-o announce_submounts \
			-f &
		set -- "$@" \
			-chardev socket,id=virtiofs-$tag,path="$sockfile" \
			-device "$vhostdev",chardev=virtiofs-$tag,tag=$tag
	done <<EOF
$(printf "%s\n" $conf_shares)
EOF
fi

# Setup interface.
tapdev=$("$rootdir/scripts/ifup" vm-"$name")
test $? -ne 0 && exit 1

# Launch qemu. The backgrounding and waiting is needed as qemu otherwise messes up signals.
"$@" 3<>"$tapdev" &
wait $!
